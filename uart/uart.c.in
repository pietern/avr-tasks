#include <avr/io.h>
#include <avr/interrupt.h>
#include <stddef.h>

#include "uart.h"
#include "task.h"

#define _B(x, on) ((on) * _BV(x))

// Static variables for a transmitter.
static task_t *tx_task = NULL;
static const uint8_t *tx_buf;
static uint8_t tx_count;

// Static variables for a receiver.
static task_t *rx_task = NULL;
static uint8_t *rx_buf;
static uint8_t rx_count;

// Register descriptions as documented in the ATmega328p datasheet.
//
// Bits in UCSR@A, USART Control and Status Register @A
// RXC@:  USART Receive Complete
// TXC@:  USART Transmit Complete
// UDRE@: USART Data Register Empty
// FE@:   Frame Error
// DOR@:  Data Overrun
// UPE@:  USART Parity Error
// U2X@:  Double the USART Transmission Speed
// MPCM@: Multi-processor Communication Mode
//
// Bits in UCSR@B, USART Control and Status Register @B
// RXCIE@: RX Complete Interrupt Enable
// TXCIE@: TX Complete Interrupt Enable
// UDRIE@: USART Data Register Empty Interrupt Enable
// RXEN@:  Receiver Enable
// TXEN@:  Transmitter Enable
// UCSZ@2: Character Size bit 2
// RXB8@:  Receive Data Bit 8
// TXB8@:  Transmit Data Bit 8
//
// Bits in UCSR0C, USART Control and Status Register @C
// UMSEL@1: USART Mode Select bit 1
// UMSEL@0: USART Mode Select bit 0
// UPM@1:   Parity Mode bit 1
// UPM@0:   Parity Mode bit 0
// USBS@:   Stop Bit Select
// UCSZ@1:  Character Size bit 1
// UCSZ@0:  Character Size bit 0
// UCPOL@:  Clock Polarity
//

// Some of the assignments here evaluate to 0 making them a no-op.
// They are included as documentation.
void uart_init(uint16_t ubrr, uint8_t x2) {
  uint8_t sreg;

  sreg = SREG;
  cli();

  UBRR@ = ubrr;

  UCSR@A = 0;
  UCSR@B = 0;
  UCSR@C = 0;

  // Double the transmission speed
  if (x2) {
    UCSR@A |= _B(U2X@, 1);
  }

  // Asynchronous USART
  UCSR@C |= _B(UMSEL@1, 0) | _B(UMSEL@0, 0);

  // 8 bit character size
  UCSR@B |= _B(UCSZ@2, 0);
  UCSR@C |= _B(UCSZ@1, 1) | _B(UCSZ@0, 1);

  // No parity bit
  UCSR@C |= _B(UPM@1, 0) | _B(UPM@0, 0);

  // 1 stop bit
  UCSR@C |= _B(USBS@, 0);

  // Enable RX/TX
  UCSR@B |= _B(RXEN@, 1) | _B(TXEN@, 1);

  SREG = sreg;
}

// Transmit interrupt handler.
ISR(USART@_UDRE_vect) {
  UDR@ = tx_buf[0];
  if (--tx_count > 0) {
    tx_buf++;
  } else {
    // Disable USART Data Register Empty Interrupt
    UCSR@B &= ~_B(UDRIE@, 1);
    task_wakeup(tx_task);
  }
}

// Write data to UART.
int uart_write(const void *buf, size_t count) {
  uint8_t sreg;

  sreg = SREG;
  cli();

  tx_task = task_current();
  tx_buf = buf;
  tx_count = count;

  // Enable USART Data Register Empty Interrupt
  // It is disabled by the interrupt handler when done.
  UCSR@B |= _B(UDRIE@, 1);

  // Task is woken up by the interrupt handler when done.
  task_suspend(NULL);

  SREG = sreg;

  return count;
}

// Receive interrupt handler.
ISR(USART@_RX_vect) {
  rx_buf[0] = UDR@;
  if (--rx_count > 0) {
    rx_buf++;
  } else {
    // Disable USART RX Complete Interrupt
    UCSR@B &= ~_B(RXCIE@, 1);
    task_wakeup(rx_task);
  }
}

// Read data from UART.
int uart_read(void *buf, size_t count) {
  uint8_t sreg;

  sreg = SREG;
  cli();

  rx_task = task_current();
  rx_buf = buf;
  rx_count = count;

  // Enable USART RX Complete Interrupt
  // It is disabled by the interrupt handler when done.
  UCSR@B |= _B(RXCIE@, 1);

  // Task is woken up by the interrupt handler when done.
  task_suspend(NULL);

  SREG = sreg;

  return count;
}

// Write character to UART.
int uart_putc(char c, FILE *unused) {
  uart_write(&c, 1);
  return 0;
}

// Read character from UART.
int uart_getc(FILE *unused) {
  char c;
  uart_read(&c, 1);
  return c;
}
